@page "/logout"
@using ToDo.Services
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow mt-5">
                <div class="card-header bg-warning text-white">
                    <h3 class="text-center mb-0">Logout</h3>
                </div>
                <div class="card-body text-center">
                    @if (isLoading)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Logging out...</span>
                        </div>
                        <p class="mt-3">Logging out...</p>
                    }
                    else if (logoutComplete)
                    {
                        <div class="alert alert-success">
                            You have been successfully logged out.
                        </div>
                        <a href="/login" class="btn btn-primary">Go to Login</a>
                    }
                    else
                    {
                        <p class="mb-4">Are you sure you want to log out?</p>
                        <div class="d-flex justify-content-center gap-3">
                            <button @onclick="ConfirmLogout" class="btn btn-danger">
                                Confirm Logout
                            </button>
                            <button @onclick="CancelLogout" class="btn btn-secondary">
                                Cancel
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private bool logoutComplete = false;

    protected override async Task OnInitializedAsync()
    {
        // Optional: Check if user is already logged out
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        if (string.IsNullOrEmpty(accessToken))
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task ConfirmLogout()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var userId = Guid.Parse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId"));
            await AuthService.LogoutAsync(userId);

            // Clear local storage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");

            // Mark logout as complete
            logoutComplete = true;
        }
        catch (Exception)
        {
            // Fallback logout method if service call fails
            await JSRuntime.InvokeVoidAsync("localStorage.clear");
            logoutComplete = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CancelLogout()
    {
        // Redirect back to home or dashboard
        NavigationManager.NavigateTo("/");
    }
}