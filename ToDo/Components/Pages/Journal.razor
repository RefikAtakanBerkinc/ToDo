@page "/journal"
@rendermode InteractiveServer
@inject JournalService JournalService
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims

<style>
    :root {
        --primary-color: #3498db;
        --secondary-color: #2ecc71;
        --background-light: #f4f6f7;
        --text-color: #2c3e50;
        --border-color: #bdc3c7;
    }

    .journal-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        background-color: white;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        border-radius: 12px;
    }

    .journal-header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .journal-header h1 {
            margin: 0;
            font-weight: 300;
        }

    .calendar-section {
        display: grid;
        grid-template-columns: 1fr 1.5fr;
        gap: 2rem;
    }

    .calendar-container {
        background-color: var(--background-light);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

        .calendar-header h4 {
            margin: 0;
            font-weight: 600;
            color: var(--text-color);
        }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.5rem;
        text-align: center;
    }

        .calendar-grid > div {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0.75rem;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

    .day-label {
        font-weight: 600;
        color: var(--text-color);
        font-size: 0.875rem;
    }

    .calendar-day {
        cursor: pointer;
        font-weight: 500;
        color: var(--text-color);
        border: 1px solid transparent;
    }

        .calendar-day:hover {
            background-color: #e6e6e6;
        }

        .calendar-day.empty {
            visibility: hidden;
        }

        .calendar-day.today {
            background-color: var(--primary-color);
            color: white;
        }

        .calendar-day.selected {
            border: 2px solid var(--secondary-color);
            font-weight: 600;
        }

        .calendar-day.has-entry {
            position: relative;
        }

            .calendar-day.has-entry::after {
                content: "";
                position: absolute;
                bottom: 4px;
                left: 50%;
                transform: translateX(-50%);
                width: 6px;
                height: 6px;
                border-radius: 50%;
                background-color: var(--secondary-color);
            }

    .journal-entry-section {
        background-color: var(--background-light);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .journal-entry-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

        .journal-entry-header h4 {
            margin: 0;
            font-weight: 600;
            color: var(--text-color);
        }

        .journal-entry-header .date-selector {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .journal-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .mood-selector {
        margin: 1rem 0;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

        .mood-selector button {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 1rem;
            background-color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .mood-selector button:hover, .mood-selector button.active {
                background-color: var(--secondary-color);
                color: white;
                border-color: var(--secondary-color);
            }

    ::deep .ql-container {
        min-height: 250px;
        max-height: 400px;
        overflow-y: auto;
        border-radius: 0 0 4px 4px;
    }

    ::deep .ql-toolbar {
        border-radius: 4px 4px 0 0;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
        gap: 0.5rem;
    }

    .delete-confirmation {
        background-color: rgba(255, 0, 0, 0.1);
        border: 1px solid #d9534f;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        text-align: center;
    }

        .delete-confirmation .buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
        }
</style>

<div class="journal-container">
    <div class="journal-header">
        <h1>Günlük</h1>
    </div>

    <div class="calendar-section">
        <div class="calendar-container">
            <div class="calendar-header">
                <button @onclick="() => NavigateMonth(-1)" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-chevron-left"></i>
                </button>
                <h4>@CurrentMonthYear</h4>
                <button @onclick="() => NavigateMonth(1)" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>

            <div class="calendar-grid">
                @foreach (var dayLabel in _dayLabels)
                {
                    <div class="day-label">@dayLabel</div>
                }

                @foreach (var day in _calendarDays)
                {
                    <div @onclick="() => SelectDate(day.Date)" class="calendar-day @GetCalendarDayClass(day)">
                        @(day.Day > 0 ? day.Day.ToString() : "")
                    </div>
                }
            </div>
        </div>

        <div class="journal-entry-section">
            @if (_isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="journal-entry-header">
                    <h4>@_selectedDate.ToString("dd MMMM yyyy, dddd")</h4>
                    <div id="journalEditorWrapper">
                        <BlazoredTextEditor @ref="_editor">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                    <button class="ql-image"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-clean"></button>
                                </span>
                            </ToolbarContent>
                        </BlazoredTextEditor>
                    </div>
                </div>

                <div class="mood-selector">
                    <span>Ruh Hali: </span>
                    @foreach (var mood in new[] { "mutlu", "normal", "üzgün", "heyecanlı", "yorgun", "endişeli" })
                    {
                        <button @onclick="() => SelectMood(mood)" class="@(_selectedMood == mood ? "active" : "")">
                            @mood
                        </button>
                    }
                </div>

                @if (_isDeleting)
                {
                    <div class="delete-confirmation">
                        <p>Bu günlük girişini silmek istediğinizden emin misiniz?</p>
                        <div class="buttons">
                            <button @onclick="async () => await DeleteJournalEntryAsync()" class="btn btn-danger">Sil</button>
                            <button @onclick="() => _isDeleting = false" class="btn btn-secondary">İptal</button>
                        </div>
                    </div>
                }

                <div class="action-buttons">
                    @if (_currentEntry != null)
                    {
                        <button @onclick="() => _isDeleting = true" class="btn btn-outline-danger">
                            <i class="bi bi-trash"></i> Sil
                        </button>
                    }

                    <button @onclick="HandleSaveJournalEntry" class="btn btn-primary">
                        <i class="bi bi-save"></i> Kaydet
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // State management
    private DateTime _selectedDate = DateTime.Today;
    private DateTime _currentMonth = DateTime.Today;
    private JournalEntry? _currentEntry;
    
    // View state properties
    private bool _isLoading = true;
    private bool _isDeleting = false;
    private bool _canCreateEntry = true;
    private string _selectedMood = "normal";
    private string _initialContent = string.Empty;
    private Guid? currentUserId;
    
    // Day names
    private readonly string[] _dayLabels =
        new[] { "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt", "Paz" };
    
    // Collections
    private List<CalendarDay> _calendarDays = new();
    private List<JournalEntry> _monthEntries = new();
    
    // Computed properties
    private string CurrentMonthYear =>
        _currentMonth.ToString("MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"));
    
    private BlazoredTextEditor? _editor;
    
    // Handler methods to convert method groups to async methods
    private async Task HandleSaveJournalEntry()
    {
        if (_editor == null) return;
        
        string? htmlContent = await _editor.GetHTML();
        if (!string.IsNullOrWhiteSpace(htmlContent) && htmlContent != "<p><br></p>")
        {
            await SaveJournalEntryAsync(htmlContent);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Günlük girişi boş olamaz.");
        }
    }
    
    // Lifecycle method
    protected override async Task OnInitializedAsync()
    {
        // Get the current user ID
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            // Parse the user ID
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                currentUserId = userId;
                await LoadCalendarAsync();
                await LoadJournalEntryAsync();
            }
        }
    }
    
    // Calendar methods
    private async Task LoadCalendarAsync()
    {
        _calendarDays.Clear();
        
        var firstDayOfMonth = new DateTime(_currentMonth.Year, _currentMonth.Month, 1);
        var startingDayOffset = CalculateDayOffset(firstDayOfMonth);
        var daysInMonth = DateTime.DaysInMonth(_currentMonth.Year, _currentMonth.Month);
        
        // Retrieve month entries for the current user
        if (currentUserId.HasValue)
        {
            _monthEntries = await JournalService.GetUserEntriesByMonthAsync(currentUserId.Value, _currentMonth);
        }
        else
        {
            _monthEntries = new List<JournalEntry>();
        }
        
        // Add empty days before month start
        AddEmptyDays(startingDayOffset);
        
        // Add month days
        AddMonthDays(daysInMonth);
    }
    
    private int CalculateDayOffset(DateTime date) =>
        date.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)date.DayOfWeek;
    
    private void AddEmptyDays(int startingDayOffset)
    {
        for (int i = 1; i < startingDayOffset; i++)
        {
            _calendarDays.Add(new CalendarDay { Day = 0 });
        }
    }
    
    private void AddMonthDays(int daysInMonth)
    {
        for (int day = 1; day <= daysInMonth; day++)
        {
            var currentDate = new DateTime(_currentMonth.Year, _currentMonth.Month, day);
            var entry = _monthEntries.FirstOrDefault(e => e.EntryDate.Date == currentDate.Date);
            
            _calendarDays.Add(new CalendarDay
            {
                Day = day,
                Date = currentDate,
                IsToday = currentDate.Date == DateTime.Today.Date,
                HasEntry = entry != null
            });
        }
    }
    
    // Navigation methods
    private async Task NavigateMonth(int direction)
    {
        _currentMonth = _currentMonth.AddMonths(direction);
        await LoadCalendarAsync();
        
        // Reset to today if navigating to current month
        if (IsCurrentMonth(_currentMonth))
        {
            _selectedDate = DateTime.Today;
        }
        
        await LoadJournalEntryAsync();
    }
    
    private bool IsCurrentMonth(DateTime month) =>
        month.Year == DateTime.Today.Year && month.Month == DateTime.Today.Month;
    
    // Date selection method
    private async Task SelectDate(DateTime date)
    {
        if (date.Day == 0) return;
        
        _selectedDate = date;
        await LoadJournalEntryAsync();
    }
    
    private async Task LoadJournalEntryAsync()
    {
        _isLoading = true;
        try
        {
            if (currentUserId.HasValue)
            {
                _currentEntry = await JournalService.GetUserEntryByDateAsync(currentUserId.Value, _selectedDate);
            }
            else
            {
                _currentEntry = null;
            }
            
            // Determine entry creation rules
            _canCreateEntry = _selectedDate.Date <= DateTime.Today.Date;
            
            // Initialize editor if it exists
            if (_editor != null)
            {
                if (_currentEntry != null)
                {
                    _selectedMood = _currentEntry.Mood ?? "normal";
                    await _editor.LoadHTMLContent(_currentEntry.Content);
                }
                else
                {
                    _selectedMood = "normal";
                    await _editor.LoadHTMLContent("");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Günlük girişi yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task SaveJournalEntryAsync(string htmlContent)
    {
        try
        {
            // Prevent future date entries
            if (_selectedDate.Date > DateTime.Today.Date)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Gelecek tarihli günlük girişi yapılamaz.");
                return;
            }
            
            if (!currentUserId.HasValue)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Günlük girişlerini kaydetmek için giriş yapmanız gerekiyor.");
                return;
            }
            
            var entry = new JournalEntry
            {
                EntryDate = _selectedDate,
                Content = htmlContent,
                Mood = _selectedMood,
                CreatedDate = DateTime.Now,
                UserId = currentUserId.Value
            };
            
            // Check if it's a past date entry
            bool isPastDateEntry = _selectedDate.Date < DateTime.Today.Date;
            
            if (_currentEntry != null)
            {
                // Update existing entry
                entry.Id = _currentEntry.Id;
                entry.CreatedDate = _currentEntry.CreatedDate;
                
                // Add a note for past date entries
                if (isPastDateEntry)
                {
                    entry.Content += $"<p><em>Not: Bu günlük girişi {DateTime.Now:dd.MM.yyyy HH:mm} tarihinde eklendi.</em></p>";
                }
                
                await JournalService.UpdateEntryAsync(entry);
            }
            else
            {
                // Add new entry
                // Add a note for past date entries
                if (isPastDateEntry)
                {
                    entry.Content += $"<p><em>Not: Bu günlük girişi {DateTime.Now:dd.MM.yyyy HH:mm} tarihinde eklendi.</em></p>";
                }
                
                await JournalService.AddEntryAsync(entry);
            }
            
            // Reload data
            await LoadCalendarAsync();
            await LoadJournalEntryAsync();
            
            await ShowSuccessMessageAsync("Günlük girişi başarıyla kaydedildi.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Hata: {ex.Message}");
        }
    }
    
    // Calendar presentation helper
    private string GetCalendarDayClass(CalendarDay day)
    {
        if (day.Day == 0) return "empty";
        
        string classes = "";
        
        if (day.IsToday) classes += "today ";
        if (day.Date.Date == _selectedDate.Date) classes += "selected ";
        if (day.HasEntry) classes += "has-entry ";
        
        return classes.Trim();
    }
    
    // UI Helpers
    private async Task ShowSuccessMessageAsync(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
    
    private async Task DeleteJournalEntryAsync()
    {
        if (_currentEntry == null) return;
        
        try
        {
            await JournalService.DeleteEntryAsync(_currentEntry.Id);
            _isDeleting = false;
            _initialContent = string.Empty;
            
            // Refresh calendar and entry data
            await LoadCalendarAsync();
            await LoadJournalEntryAsync();
            
            await ShowSuccessMessageAsync("Günlük girişi başarıyla silindi.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Silme işlemi sırasında hata oluştu: {ex.Message}");
        }
    }
    
    private void SelectMood(string mood)
    {
        _selectedMood = mood;
    }
    
    private void EditJournalEntry()
    {
        // Toggle edit mode if needed
    }
    
    // Data model for calendar days
    private class CalendarDay
    {
        public int Day { get; set; }
        public DateTime Date { get; set; }
        public bool IsToday { get; set; }
        public bool HasEntry { get; set; }
    }
}