@page "/login"
@using ToDo.Models
@using ToDo.Models.Dto
@using ToDo.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Giriş</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center mb-0">Giriş</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@userDto" OnValidSubmit="HandleLogin" FormName="@formName">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="@usernameId" class="form-label">Kullanıcı Adı</label>
                            <InputText id="@usernameId" @bind-Value="userDto.UserName" class="form-control" autocomplete="username" />
                            <ValidationMessage For="@(() => userDto.UserName)" />
                        </div>

                        <div class="mb-3">
                            <label for="@passwordId" class="form-label">Şifre</label>
                            <div class="input-group">
                                <InputText id="@passwordId" @bind-Value="userDto.Password" class="form-control" type="@(showPassword ? "text" : "password")" autocomplete="current-password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => userDto.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> İşleniyor...</span>
                                }
                                else
                                {
                                    <span>Giriş Yap</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }

                    <div class="mt-3 text-center">
                        <p>Hesabınız yok mu? <a href="/register-new">Kayıt olun</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserDto userDto = new UserDto();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string usernameId = $"username-{Guid.NewGuid()}";
    private string passwordId = $"password-{Guid.NewGuid()}";
    private string formName = $"login-form-{Guid.NewGuid()}";
    private bool showPassword = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(userDto);

            if (result is null)
            {
                errorMessage = "Geçersiz kullanıcı adı veya şifre.";
                return;
            }

            // Store tokens in local storage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", result.AccessToken);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", result.RefreshToken);

            // Extract user ID from the token
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(result.AccessToken) as JwtSecurityToken;
            var userId = jsonToken?.Claims.First(claim => claim.Type == ClaimTypes.NameIdentifier).Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", userId);
            }

            // ÖNEMLİ: State değişikliği bildirimi ekleyin
            if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                customAuthStateProvider.NotifyAuthenticationStateChanged();

                // Critical: Kısa bir gecikme ekleyerek state değişiminin işlenmesini sağlayın
                await Task.Delay(100);
            }

            // Redirect to the returnUrl if provided, otherwise to the home page
            var navigateTo = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
            NavigationManager.NavigateTo(navigateTo);
        }
        catch (Exception ex)
        {
            errorMessage = $"Bir hata oluştu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}