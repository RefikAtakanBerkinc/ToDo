@page "/signup"
@using ToDo.Models
@using ToDo.Models.Dto
@using ToDo.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center mb-0">Register</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@userDto" OnValidSubmit="HandleRegistration" FormName="@formName">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="@usernameId" class="form-label">Username</label>
                            <InputText id="@usernameId" @bind-Value="userDto.UserName" class="form-control" autocomplete="username" />
                            <ValidationMessage For="@(() => userDto.UserName)" />
                        </div>

                        <div class="mb-3">
                            <label for="@passwordId" class="form-label">Password</label>
                            <InputText id="@passwordId" @bind-Value="userDto.Password" class="form-control" type="password" autocomplete="new-password" />
                            <ValidationMessage For="@(() => userDto.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="@confirmPasswordId" class="form-label">Confirm Password</label>
                            <InputText id="@confirmPasswordId" @bind-Value="confirmPassword" class="form-control" type="password" autocomplete="new-password" />
                            @if (!string.IsNullOrEmpty(passwordMismatchError))
                            {
                                <div class="text-danger">@passwordMismatchError</div>
                            }
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Processing...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @successMessage
                        </div>
                    }

                    <div class="mt-3 text-center">
                        <p>Already have an account? <a href="/login">Login</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserDto userDto = new UserDto();
    private string confirmPassword = string.Empty;
    private string passwordMismatchError = string.Empty;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string usernameId = $"username-{Guid.NewGuid()}";
    private string passwordId = $"password-{Guid.NewGuid()}";
    private string confirmPasswordId = $"confirm-{Guid.NewGuid()}";
    private string formName = $"register-form-{Guid.NewGuid()}";

    private async Task HandleRegistration()
    {
        // Reset messages
        errorMessage = string.Empty;
        successMessage = string.Empty;
        passwordMismatchError = string.Empty;

        // Check if passwords match
        if (userDto.Password != confirmPassword)
        {
            passwordMismatchError = "Passwords do not match.";
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAsync(userDto);

            if (result is null)
            {
                errorMessage = "Username already exists. Please choose a different one.";
                return;
            }

            successMessage = "Registration successful! Redirecting to login...";

            // Wait a moment before redirecting
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}